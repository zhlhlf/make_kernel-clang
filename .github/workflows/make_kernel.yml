name: make kernel

on:
  workflow_dispatch:

    inputs:
      KERNEL_SOURCE:
        description: 'Kernel Source'
        required: true
        default: 'https://github.com/libxzr/android_kernel_oneplus_sm8250'
        
      KERNEL_SOURCE_BRANCH:
        description: 'Branch'
        required: true
        default: 'oos11/final'
        
      KERNEL_DEFCONFIG:
        description: 'Defconfig'
        required: true
        default: 'vendor/kona-perf_defconfig'

      CLANG_URL:
        description: 'Clang URL'
        required: true
        default: 'https://github.com/ZyCromerZ/Clang/releases/download/14.0.6-20230213-release/Clang-14.0.6-20230213.tar.gz'      
        
      ksu_path_or_KPROBES:
        description: 'ksu--  true is path || false is KPROBES'
        required: true
        default: 'false'
        type: boolean

jobs:
  build:
    runs-on: ubuntu-latest
    steps:

    - uses: actions/checkout@v3

    - name: 配置环境
      run: |
        echo "BUILD_TIME=$(TZ=Asia/Shanghai date "+%Y%m%d%H%M")" >> $GITHUB_ENV
        echo "DEVICE=$(echo ${{ github.event.inputs.KERNEL_DEFCONFIG }} | sed 's!vendor/!!;s/_defconfig//;s/_user//;s/-perf//')" >> $GITHUB_ENV
        sudo apt-get update
        sudo apt-get install git ccache automake flex lzop bison gperf build-essential zip curl zlib1g-dev g++-multilib libxml2-utils bzip2 libbz2-dev libbz2-1.0 libghc-bzlib-dev squashfs-tools pngcrush schedtool dpkg-dev liblz4-tool make optipng maven libssl-dev pwgen libswitch-perl policycoreutils minicom libxml-sax-base-perl libxml-simple-perl bc libc6-dev-i386 lib32ncurses5-dev libx11-dev lib32z-dev libgl1-mesa-dev xsltproc unzip device-tree-compiler python2 python3

    - name: 下载clang和内核源
      run: |
        mkdir clang
        aria2c -j10 ${{ github.event.inputs.CLANG_URL }} -o clang.tar.gz
        tar -C clang/ -zxf clang.tar.gz
        git clone --depth=1 ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }} android-kernel
        cd android-kernel
        git submodule init
        git submodule update
    
    - name: 编译内核
      run: |
        cd android-kernel
        export CLANG_PATH=$GITHUB_WORKSPACE/clang
        export PATH=${CLANG_PATH}/bin:${PATH}
        export CLANG_TRIPLE=aarch64-linux-gnu-
        export ARCH=arm64
        export SUBARCH=arm64
        export KBUILD_COMPILER_STRING="$(clang --version | head -n 1 )"
        export KBUILD_BUILD_HOST=zhlhlf_linux
        export KBUILD_BUILD_USER=zhlhlf

        make O=out -j$(nproc --all) CC="ccache clang" CXX="ccache clang++" ARCH=arm64 CROSS_COMPILE=$CLANG_PATH/bin/aarch64-linux-gnu- CROSS_COMPILE_ARM32=$CLANG_PATH/bin/arm-linux-gnueabi- LD=ld.lld ${{ github.event.inputs.KERNEL_DEFCONFIG }}
        echo "----------------------------"
        sed s/CONFIG_LOCALVERSION=".*"/'CONFIG_LOCALVERSION="-perf-ksu-zhlhlf"'/g out/.config >>.config1
        rm -rf out/.config
        mv .config1 out/.config
        make O=out -j$(nproc --all) CC="ccache clang" CXX="ccache clang++" ARCH=arm64 CROSS_COMPILE=$CLANG_PATH/bin/aarch64-linux-gnu- CROSS_COMPILE_ARM32=$CLANG_PATH/bin/arm-linux-gnueabi- LD=ld.lld || exit 2>&1 | tee kernel.log

        cat > AnyKernel3.sh <<end
        rm -rf AnyKernel3
        git clone --depth=1 https://github.com/zhlhlf/AnyKernel3 AnyKernel3
        rm -rf AnyKernel3/.git
        mv out/arch/arm64/boot/dtbo.img AnyKernel3/ || echo "没有dtbo.img"
        mv out/arch/arm64/boot/Image AnyKernel3/
        mv kernel.log AnyKernel3/
        cd AnyKernel3
        zip -r kernel-\$1-$(TZ=Asia/Shanghai date "+%Y%m%d%H%M").zip *
        mkdir ../../666 || echo ""
        cp -r kernel-\$1-$(TZ=Asia/Shanghai date "+%Y%m%d%H%M").zip ../../666
        end
        sh AnyKernel3.sh 
        
        echo -e "\n\n\n\n"
        echo "--------------加入ksu编译-----------------"
        make O=out CC="ccache clang" CXX="ccache clang++" ARCH=arm64 CROSS_COMPILE=$CLANG_PATH/bin/aarch64-linux-gnu- CROSS_COMPILE_ARM32=$CLANG_PATH/bin/arm-linux-gnueabi- LD=ld.lld ${{ github.event.inputs.KERNEL_DEFCONFIG }}
        echo "----------------------------"
        sed s/CONFIG_LOCALVERSION=".*"/'CONFIG_LOCALVERSION="-perf-ksu-zhlhlf"'/g out/.config >>.config1
        rm -rf out/.config
        curl -LSs "https://raw.githubusercontent.com/tiann/KernelSU/main/kernel/setup.sh" | bash -

        hh="
        CONFIG_KPROBES=y
        CONFIG_HAVE_KPROBES=y
        CONFIG_KPROBE_EVENTS=y
        CONFIG_MODULES=y
        CONFIG_MODULE_FORCE_LOAD=y
        CONFIG_SECURITY_SELINUX_DEVELOP=y
        CONFIG_DM_VERITY=y
        CONFIG_DM_VERITY_AVB=y
        "
        if [ ${{ github.event.inputs.ksu_path_or_KPROBES }} = true ];then git apply ../KernelSU.patch ; echo "path----------" ; fi 
        if [ ${{ github.event.inputs.ksu_path_or_KPROBES }} = false ];then for i in $hh; do echo $i >> .config1; done; echo "kprobes----------" ; fi 
        mv .config1 out/.config
        echo "----------------------------"
        cat out/.config | grep KPROBES
        cat out/.config | grep CONFIG_MODULES
        echo "----------------------------"
        make O=out -j$(nproc --all) CC="ccache clang" CXX="ccache clang++" ARCH=arm64 CROSS_COMPILE=$CLANG_PATH/bin/aarch64-linux-gnu- CROSS_COMPILE_ARM32=$CLANG_PATH/bin/arm-linux-gnueabi- LD=ld.lld 2>&1 | tee kernel.log               
        echo "----------------------"
        sh AnyKernel3.sh "KernelSU"

    - name: 上传到onedrive
      run: |
         wget -q https://raw.githubusercontent.com/zhlhlf/text/main/onedrive_mount.sh && sh onedrive_mount.sh ${{ secrets.RCK }} 临时存放文件
